{"version":3,"sources":["logo.svg","cat2.jpg","Home.js","cat.jpg","About.js","Users.js","App.js","index.js","swDev.js"],"names":["Home","useState","setData","mode","setMode","useEffect","fetch","then","response","json","result","console","warn","localStorage","setItem","JSON","stringify","catch","err","collection","getItem","parse","class","role","className","src","Cat2","alt","About","id","Cat","Users","data","Table","striped","bordered","hover","responsive","map","item","name","email","address","street","App","Navbar","bg","variant","Brand","href","Nav","Link","to","path","component","ReactDOM","render","StrictMode","document","getElementById","determineAppServerKey","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","swUrl","process","navigator","serviceWorker","register","pushManager","getSubscription","subscription","subscribe","userVisibleOnly","applicationServerKey","swDev"],"mappings":"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","file":"static/js/main.f9bbf692.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export default __webpack_public_path__ + \"static/media/cat2.e0eb7c25.jpg\";","import React from 'react'\nimport { useState, useEffect } from 'react'\n\nimport Cat2 from \"../src/cat2.jpg\";\n\nexport default function Home() {\n    const [data, setData] = useState([])\n    const [mode, setMode] = useState('online');\n    useEffect(() => {\n        let url = \"https://jsonplaceholder.typicode.com/users\"\n        fetch(url).then((response) => {\n            response.json().then((result) => {\n                console.warn(result)\n                setData(result)\n                localStorage.setItem(\"users\", JSON.stringify(result))\n            })\n        }).catch(err => {\n            setMode('offline')\n            let collection = localStorage.getItem('users');\n            setData(JSON.parse(collection))\n        })\n    }, [])\n    return (\n        <div>\n            <div>\n                {\n                    mode === 'offline' ?\n                        <div class=\"alert alert-warning\" role=\"alert\">\n                            you are in offline mode or some issue with connection\n                        </div>\n                        : null\n\n                }\n            </div>\n            <div>\n                {\n                    mode !== 'offline' ?\n                    <div>\n                        <div class=\"alert alert-warning\" role=\"alert\">\n                            Hi there! welcome to petpark...\n                        </div>\n                    <div><h1>Pet Park</h1></div>\n                    <div><img className='cat' src={Cat2} alt='pht'/></div>\n                    </div>\n                        : null\n\n                }\n            </div>\n           \n\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/cat.209457df.jpg\";","import React from 'react';\nimport Cat from \"../src/cat.jpg\";\nimport { useState, useEffect } from 'react'\n\nexport default function About() {\n    const [data, setData] = useState([])\n    const [mode, setMode] = useState('online');\n    useEffect(() => {\n        let url = \"https://jsonplaceholder.typicode.com/users\"\n        fetch(url).then((response) => {\n            response.json().then((result) => {\n                console.warn(result)\n                setData(result)\n                localStorage.setItem(\"users\", JSON.stringify(result))\n            })\n        }).catch(err => {\n            setMode('offline')\n            let collection = localStorage.getItem('users');\n            setData(JSON.parse(collection))\n        })\n    }, [])\n    return (\n        <div>\n             <div>\n                {\n                    mode === 'offline' ?\n                        <div className=\"alert alert-warning\" role=\"alert\">\n                            you are in offline mode or some issue with connection\n                        </div>\n                        : null\n\n                }\n         \n                { \n                    mode !== 'offline' ?\n            <div>\n                <h1>Who We Are?</h1>\n                    <img id='cat' src={Cat} alt='pht'/>\n                            <p>Pet Park is a national nonprofit organization \n                            advocating for animal rights and veganism since 1976.\n                            <br />For many years, we were the only national animal \n                            rights organization fighting for farmed animals.<br />\n                            Operating from our nationâ€™s capital through a network \n                            of local activists, we conduct massive public awareness \n                            campaigns. <br />Our Animal Rights National Conference has \n                            inspired hundreds of animal rights activists and motivated \n                            ovement newcomers</p>\n                      \n                            \n            </div> : null\n                }\n            </div>\n                </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Table } from 'react-bootstrap'\nexport default function Users() {\n    const [data, setData] = useState([])\n    const [mode, setMode] = useState('online');\n    useEffect(() => {\n        let url = \"https://jsonplaceholder.typicode.com/users\"\n        fetch(url).then((response) => {\n            response.json().then((result) => {\n                console.warn(result)\n                setData(result)\n                localStorage.setItem(\"users\", JSON.stringify(result))\n            })\n        }).catch(err => {\n            setMode('offline')\n            let collection = localStorage.getItem('users');\n            setData(JSON.parse(collection))\n        })\n    }, [])\n    return (\n        <div>\n            <div>\n                {\n                    mode === 'offline' ?\n                        <div className=\"alert alert-warning\" role=\"alert\">\n                            you are in offline mode or some issue with connection\n                        </div>\n                        : null\n\n                }\n            </div>\n            <div>\n            { \n                    mode === 'online' ?\n            <div>\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Address</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        data.map((item) => (\n                            <tr>\n                                <td>{item.id}</td>\n                                <td>{item.name}</td>\n                                <td>{item.email}</td>\n                                <td>{item.address.street}</td>\n                            </tr>\n                        ))\n                    }\n\n                </tbody>\n            </Table>\n            </div> \n            : null\n            }\n            </div>\n            \n        </div>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Navbar, Nav } from 'react-bootstrap'\nimport Home from './Home'\nimport About from './About'\nimport Users from './Users'\nimport { Link, Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Pet Park</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link ><Link to=\"/\">Home</Link></Nav.Link>\n            <Nav.Link ><Link to=\"/about\" >About</Link></Nav.Link>\n            <Nav.Link><Link to=\"/users\">Clients</Link></Nav.Link>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <Route path=\"/about\" component={About} ></Route>\n          <Route path=\"/users\" component={Users} ></Route>\n          <Route path=\"/\" component={Home} ></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport swDev from './swDev'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nswDev();","export default function swDev()\n{\n  function determineAppServerKey() {\n    const vapidPublicKey =\n    \"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\";\n      return urlBase64ToUint8Array(vapidPublicKey);\n  }\n\n  function urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  \n    let swUrl=  `${process.env.PUBLIC_URL}/sw.js`\n    navigator.serviceWorker.register(swUrl).then((response)=>{\n        console.warn(\"response\",response)\n\n        return response.pushManager.getSubscription()\n        .then(function (subscription) {\n           response.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: determineAppServerKey()\n          })\n          \n\n        })\n\n    }) \n}"],"sourceRoot":""}